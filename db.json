{
  "projects": [
    {
      "id": 1,
      "name": "TypeBeat",
      "description": "A digital production marketplace that allows music producers to sell and license beats."
    },
    {
      "id": 2,
      "name": "Figma Extension",
      "description": null
    },
    {
      "id": 3,
      "name": "ChatGPT Messenger",
      "description": "A 24 Hour Hackathon Project Using ChatGPT as an option for automated Messaging"
    },
    {
      "id": 4,
      "name": "Microsoft Sharepoint Embedded",
      "description": "Refactoring Microsoft's Sharepoint Embedded DEMO Website"
    },
    {
      "id": 5,
      "name": "Side Bar Menu",
      "description": "A custom side bar when closed still shows but with icons and open full menu and icons"
    },
    {
      "id": 6,
      "name": "Book Collection",
      "description": "Collection of Book Documents Using MongoDB and displayed through Node JS"
    }
  ],
  "react": [
    {
      "id": 101,
      "projectId": 1,
      "description": "Example of a Single Card to be mapped in another component",
      "code": "import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardContent, Link } from \"@material-ui/core\";\n\nAlbumSingle.propTypes = {\n  currentUser: PropTypes.shape({\n    avatar: PropTypes.string,\n    email: PropTypes.string,\n    userName: PropTypes.string,\n  }),\n  location: PropTypes.shape({\n    state: PropTypes.string,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  }),\n  albums: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    professionalName: PropTypes.string,\n    imageUrl: PropTypes.string,\n  }),\n  onClick: PropTypes.func,\n};\n\nexport default function AlbumSingle(props) {\n  const oneAlbum = props.albums;\n\n  const onError = (e) => {\n    e.target.onerror = null;\n    e.target.src =\n      \"https://demo.tutorialzine.com/2015/03/html5-music-player/assets/img/default.png\";\n  };\n\n  const onAlbumClick = () => {\n    props.onClick(oneAlbum);\n  };\n\n  return (\n    <Card\n      className=\"mb-4 mr-1\"\n      style={{\n        backgroundColor: \"transparent\",\n        boxShadow: \"none\",\n      }}\n    >\n      <img\n        alt=\"...\"\n        className=\"card-img-top\"\n        style={{ borderRadius: 10, aspectRatio: \"1/1\" }}\n        src={oneAlbum.imageUrl}\n        onError={onError}\n      />\n      <CardContent className=\"p-3\">\n        <Link\n          component=\"h5\"\n          className=\"card-title font-weight-bold font-size-lg\"\n          color=\"inherit\"\n          onClick={onAlbumClick}\n        >\n          {oneAlbum.name}\n        </Link>\n        <p className=\"card-text\">{oneAlbum.professionalName}</p>\n      </CardContent>\n    </Card>\n  );\n}"
    },
    {
      "id": 102,
      "projectId": 1,
      "description": "Example of A Carousel using slider from React-Slick and mapping multiple single cards",
      "code": "import React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport * as landingPageService from \"../../services/landingPageService\";\nimport TrackSingle from \"./TrackSingle\";\nimport PlaylistSingle from \"./PlaylistSingle\";\nimport MemberSingle from \"./MemberSingle\";\nimport PropTypes from \"prop-types\";\nimport Slider from \"react-slick\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\n\nconst settings = {\n  dots: true,\n  speed: 500,\n  slidesToShow: 5,\n  slidesToScroll: 5,\n  arrows: true,\n  prevArrow: <NavigateBeforeIcon />,\n  nextArrow: <NavigateNextIcon />,\n  responsive: [\n    {\n      breakpoint: 1300,\n      settings: { slidesToShow: 5, slidesToScroll: 5 }\n    },\n    {\n      breakpoint: 940,\n      settings: { slidesToShow: 1, slidesToScroll: 1 }\n    }\n  ]\n};\n\nclass CarouselLP extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: []\n    };\n  }\n\n  componentDidMount() {\n    landingPageService\n      .getTop10()\n      .then(this.onGetTop10Success)\n      .catch(this.onGetTop10Error);\n  }\n\n  onGetTop10Success = response => {\n    let { contents, members, playlists } = response.item;\n    this.setState(() => {\n      return {\n        mappedContent: contents?.map(this.mapContent),\n        mappedPlaylist: playlists?.map(this.mapPlaylist),\n        mappedMember: members?.map(this.mapMember)\n      };\n    });\n  };\n\n  onGetTop10Error = error => {};\n\n  mapContent = oneContent => {\n    return <TrackSingle key={`Top10-${oneContent.id}`} content={oneContent} onClick={this.onContentClick} />;\n  };\n\n  onContentClick = oneContent => {\n    const { history } = this.props;\n    history.push(`/track/${oneContent.id}`);\n  };\n\n  mapPlaylist = onePlaylist => {\n    return <PlaylistSingle key={`Top10-${onePlaylist.playlistId}`} playlists={onePlaylist} onClick={this.onPlaylistClick} />;\n  };\n\n  onPlaylistClick = onePlaylist => {\n    const { history } = this.props;\n    history.push(`/playList/${onePlaylist.id}`);\n  };\n\n  mapMember = oneMember => {\n    return <MemberSingle key={`Top10-${oneMember.professionalName}`} members={oneMember} onClick={this.onMemberClick} />;\n  };\n\n  onMemberClick = oneMember => {\n    const { history } = this.props;\n    history.push(`/musician/${oneMember.id}`, { musician: oneMember });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.mappedContent && (\n          <div className=\"container mt-4\">\n            <div className=\"header\">\n              <h3> Trending Tracks</h3>\n            </div>\n            <Slider {...settings}>{this.state.mappedContent}</Slider>\n          </div>\n        )}\n        {this.state.mappedPlaylist && (\n          <div className=\"container mt-4\">\n            <div className=\"header\">\n              <h3>Popular Playlists</h3>\n            </div>\n            <Slider {...settings}>{this.state.mappedPlaylist}</Slider>\n          </div>\n        )}\n        {this.state.mappedMember && (\n          <div className=\"container mt-4\">\n            <div className=\"header\">\n              <h3> Recommended Members</h3>\n            </div>\n            <Slider {...settings}>{this.state.mappedMember}</Slider>\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nCarouselLP.propTypes = {\n  currentUser: PropTypes.shape({\n    avatar: PropTypes.string,\n    email: PropTypes.string,\n    userName: PropTypes.string\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }),\n  location: PropTypes.shape({\n    state: PropTypes.string\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number\n    })\n  })\n};\n\nexport default withRouter(CarouselLP);"
    },
    {
      "id": 103,
      "projectId": null,
      "description": "Formatting DateTime to user readable Date and Time",
      "code": "export function formatDate(dateString: string | number | Date) {\n    const createdAtDate = new Date(dateString);\n\n    const months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ];\n\n    const month = months[createdAtDate.getMonth()];\n    const day = createdAtDate.getDate();\n    const year = createdAtDate.getFullYear();\n    let hours = createdAtDate.getHours();\n    const minutes = (createdAtDate.getMinutes() < 10 ? \"0\" : \"\") + createdAtDate.getMinutes();\n    const ampm = hours >= 12 ? \"pm\" : \"am\";\n    hours = hours % 12;\n    hours = hours ? hours : 12;\n\n    const formattedDate = `${month} ${day}, ${hours}:${minutes} ${ampm}`;\n\n    return formattedDate;\n}"
    },
    {
      "id": 104,
      "projectId": null,
      "description": "Display Code Using React Typescript and Daisy UI",
      "code": "\"use client\";\nimport React from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { dracula as theme } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport { FiExternalLink } from \"react-icons/fi\";\nimport { useTaskStore } from \"@/libs/taskStore\";\nimport { useRouteParams } from \"@/libs/useRouteParams\";\nimport Image from \"next/image\";\n\nconst TaskDetailsCode = () => {\n  const { projectId, taskId } = useRouteParams();\n\n  const { getTask } = useTaskStore();\n  const task = getTask(projectId, taskId);\n\n  function formatCodeWithPrefixes(codeString: string, language: string) {\n    return (\n      <SyntaxHighlighter\n        language={language}\n        style={theme}\n        showLineNumbers\n        customStyle={{\n          maxWidth: \"100%\",\n          overflow: \"auto\",\n        }}\n      >\n        {codeString}\n      </SyntaxHighlighter>\n    );\n  }\n\n  const checkForPOMTitle = (code: string) => {\n    const isTestModel = code.includes(\".spec\");\n    return (\n      <p\n        className=\"text-left\"\n        style={{\n          paddingBottom: \"10px\",\n          color: \"#1792EB\",\n          fontFamily: \"Roboto\",\n          fontSize: \"16px\",\n          fontStyle: \"normal\",\n          fontWeight: 600,\n          lineHeight: \"normal\",\n          textTransform: \"capitalize\",\n        }}\n      >\n        {isTestModel ? \"Test Model:\" : \"Object Model:\"}\n      </p>\n    );\n  };\n\n  const checkForPOMCard = (code: string) => {\n    const isTestModel = code.includes(\".spec\");\n    return (\n      <div\n        className=\"card-body\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          padding: \"0\",\n        }}\n      >\n        <p style={{ paddingLeft: \"10px\" }}>\n          {isTestModel ? \"\" : \"I have created code in your Playwright account.\"}\n        </p>\n        <a href={task?.prUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n          <button className=\"btn btn-primary\" style={{ background: \"#FEFEFE\" }}>\n            {isTestModel ? \"View\" : \"Debug\"}\n            <FiExternalLink />\n          </button>\n        </a>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(400px, 1fr))\",\n        gap: \"20px\",\n        justifyContent: \"center\",\n      }}\n    >\n      {task?.files.map((file, index) => (\n        <div key={index} style={{ width: \"100%\" }}>\n          <div>{checkForPOMTitle(file.pathFromRoot)}</div>\n          <div\n            className=\"hero\"\n            style={{\n              borderRadius: \"20px\",\n              background: \"#141718\",\n              padding: \"24px 24px 64px 24px\",\n              maxHeight: \"100vh\",\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <div\n              className=\"hero-content flex flex-col\"\n              style={{ width: \"100%\" }}\n            >\n              <div\n                className=\"card\"\n                style={{\n                  width: \"100%\",\n                  background: \"rgba(35, 38, 39, 0.5)\",\n                  borderRadius: \"10px\",\n                  maxHeight: \"calc(50vh - 100px)\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <div\n                  className=\"card-body\"\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    padding: \"0\",\n                  }}\n                >\n                  <div style={{ margin: \"10px\" }}>\n                    <button\n                      className=\"btn btn-neutral\"\n                      style={{ color: \"white\" }}\n                    >\n                      Javascript\n                    </button>\n                  </div>\n                  <div>\n                    <button\n                      className=\"btn btn-ghost\"\n                      style={{ color: \"white\" }}\n                    >\n                      Copy Code\n                    </button>\n                  </div>\n                </div>\n                <div\n                  className=\"mockup-code\"\n                  style={{ overflowY: \"auto\", flexGrow: 1 }}\n                >\n                  {formatCodeWithPrefixes(file.fileContent, \"javascript\")}\n                </div>\n              </div>\n              <div\n                className=\"card\"\n                style={{\n                  width: \"100%\",\n                  background: \"rgba(35, 38, 39, 0.5)\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                {checkForPOMCard(file.pathFromRoot)}\n              </div>\n            </div>\n          </div>\n          {!file.pathFromRoot.includes(\".spec\") && (\n            <div style={{ marginTop: \"-35px\", marginBottom: \"15px\" }}>\n              <div\n                className=\"avatar online placeholder\"\n                style={{ marginRight: \"15px\" }}\n              >\n                <div\n                  className=\"bg-neutral text-neutral-content rounded-full\"\n                  style={{\n                    width: \"60px\",\n                    height: \"60px\",\n                  }}\n                >\n                  <Image\n                    src=\"/Avatar2.png\"\n                    alt=\"Nolan\"\n                    width=\"60\"\n                    height=\"60\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TaskDetailsCode;"
    },
    {
      "id": 105,
      "projectId": null,
      "description": "Displaying Log Details Using Typescript and Daisy UI",
      "code": "\"use client\";\nimport React, { useState } from \"react\";\nimport { Logs } from \"@/libs/interfaces\";\nimport { formatDate } from \"@/helpers\";\nimport { useTaskStore } from \"@/libs/taskStore\";\nimport { FaCircle } from \"react-icons/fa\";\nimport { useRouteParams } from \"@/libs/useRouteParams\";\nimport Image from \"next/image\";\n\nconst TaskDetailsLogs = () => {\n  const { projectId, taskId } = useRouteParams();\n  const [selectedLog, setSelectedLog] = useState<Logs | null>(null);\n\n  const { getTask } = useTaskStore();\n  const task = getTask(projectId, taskId);\n\n  const getLatestLog = (logs: any[]): React.ReactNode => {\n    if (!logs || logs.length === 0) return null;\n\n    const latestLog = logs.reduce((latest, current) => {\n      return new Date(current.ts) > new Date(latest.ts) ? current : latest;\n    });\n\n    return (\n      <div>\n        <p\n          style={{\n            color: \"#6C7275\",\n            fontFamily: \"Roboto\",\n            fontSize: \"14px\",\n            fontStyle: \"normal\",\n            fontWeight: 500,\n          }}\n        >\n          {formatDate(latestLog.ts)}\n        </p>\n      </div>\n    );\n  };\n\n  const sortLogsByTimestamp = (logs: any[]) => {\n    return [...logs].sort(\n      (a, b) => new Date(b.ts).getTime() - new Date(a.ts).getTime()\n    );\n  };\n\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", flexDirection: \"row\" }}>\n      <div\n        style={{\n          flex: 1,\n          overflowY: \"auto\",\n          padding: \"10px\",\n          maxHeight: \"75vh\",\n        }}\n      >\n        {task?.logs.map((log, index) => (\n          <div\n            key={index}\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              marginBottom: \"20px\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                marginBottom: \"10px\",\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                  marginRight: \"10px\",\n                }}\n              >\n                <FaCircle\n                  style={{\n                    height: \"8px\",\n                    width: \"8px\",\n                    color: \"#FEFEFE\",\n                    opacity: \"0.2\",\n                    margin: \"5px 0\",\n                  }}\n                />\n                <FaCircle\n                  style={{\n                    height: \"8px\",\n                    width: \"8px\",\n                    color: \"#FEFEFE\",\n                    margin: \"5px 0\",\n                  }}\n                />\n                <FaCircle\n                  style={{\n                    height: \"8px\",\n                    width: \"8px\",\n                    color: \"#FEFEFE\",\n                    opacity: \"0.2\",\n                    margin: \"5px 0\",\n                  }}\n                />\n              </div>\n              <div style={{ flex: 1 }}>\n                <div\n                  className=\"card\"\n                  style={{ background: \"rgba(20, 23, 24, 1)\" }}\n                >\n                  <div\n                    className=\"card-body\"\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      alignItems: \"center\",\n                      flexDirection: \"row\",\n                    }}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        flexDirection: \"row\",\n                      }}\n                    >\n                      <div\n                        className=\"avatar online placeholder\"\n                        style={{ marginRight: \"15px\" }}\n                      >\n                        <div\n                          className=\"bg-neutral text-neutral-content rounded-full\"\n                          style={{\n                            width: \"60px\",\n                            height: \"60px\",\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          <Image\n                            src=\"/Avatar2.png\"\n                            alt=\"Nolan\"\n                            width=\"60\"\n                            height=\"60\"\n                          />\n                        </div>\n                      </div>\n                      <h2\n                        className=\"card-title\"\n                        style={{\n                          color: \"var(--neutral-01100, #FEFEFE)\",\n                          fontFamily: \"Roboto\",\n                          fontSize: \"18px\",\n                          fontStyle: \"normal\",\n                          fontWeight: 600,\n                          lineHeight: \"24px\",\n                        }}\n                      >\n                        {log.name}\n                      </h2>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                alignItems: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <div>{getLatestLog(log.logs)}</div>\n              <button\n                className=\"btn btn-neutral\"\n                onClick={() => setSelectedLog(log)}\n                style={{\n                  marginLeft: \"10px\",\n                  color: \"#E8ECEF\",\n                  fontFamily: \"Roboto\",\n                  fontSize: \"14px\",\n                  fontStyle: \"normal\",\n                  fontWeight: 500,\n                  lineHeight: \"20px\",\n                  letterSpacing: \"-0.28px\",\n                }}\n              >\n                View\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n      <div style={{ flex: 1, padding: \"10px\", maxHeight: \"50vh\" }}>\n        <div className=\"card\" style={{ background: \"rgba(20, 23, 24, 1)\" }}>\n          <div className=\"card-body\">\n            <h2\n              className=\"card-title\"\n              style={{\n                color: \"var(--neutral-01100, #FEFEFE)\",\n                fontFamily: \"Roboto\",\n                fontSize: \"18px\",\n                fontStyle: \"normal\",\n                fontWeight: 600,\n                lineHeight: \"24px\",\n                marginBottom: \"20px\",\n              }}\n            >\n              Log Detail\n            </h2>\n            {selectedLog ? (\n              <div style={{ overflowY: \"auto\", maxHeight: \"66vh\" }}>\n                {sortLogsByTimestamp(selectedLog.logs).map(\n                  (logDetail, index) => (\n                    <div\n                      key={index}\n                      className=\"log-container\"\n                      style={{\n                        display: \"flex\",\n                        marginBottom: \"10px\",\n                        flexDirection: \"row\",\n                      }}\n                    >\n                      <div\n                        className=\"log-number\"\n                        style={{\n                          width: \"10px\",\n                          textAlign: \"right\",\n                          color: \"rgba(254, 254, 254, 1)\",\n                          fontSize: \"16px\",\n                          fontWeight: 300,\n                          marginRight: \"20px\",\n                          opacity: 0.25,\n                        }}\n                      >\n                        {index + 1}\n                      </div>\n                      <div className=\"log-content\">\n                        <span\n                          className=\"log-message\"\n                          style={{\n                            color: \"var(--neutral-01100, #FEFEFE)\",\n                            fontFamily: \"Roboto\",\n                            fontSize: \"16px\",\n                            fontStyle: \"normal\",\n                            fontWeight: 400,\n                            lineHeight: \"24px\",\n                          }}\n                        >\n                          {logDetail.l}\n                        </span>{\" \"}\n                        <span\n                          className=\"log-timestamp\"\n                          style={{\n                            color: \"var(--neutral-01100, #FEFEFE)\",\n                            fontFamily: \"Roboto\",\n                            fontSize: \"14px\",\n                            fontStyle: \"normal\",\n                            fontWeight: 300,\n                            lineHeight: \"24px\",\n                            opacity: 0.5,\n                          }}\n                        >\n                          {logDetail.ts}\n                        </span>\n                      </div>\n                    </div>\n                  )\n                )}\n              </div>\n            ) : (\n              <p>Select a log to view details</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskDetailsLogs;\"\n}"
    },
    {
      "id": 106,
      "projectId": 3,
      "description": "Custom Made Chat Bubbles",
      "code": "import { Avatar, Grid, List, ListItem, ListItemText, makeStyles } from \"@material-ui/core\";\nimport PersonIcon from \"@mui/icons-material/Person\";\nimport Grace2 from \"../img/Grace2.jpeg\";\nimport { useRef } from \"react\";\n\ninterface Message {\n  id: number;\n  sender: string;\n  text: string;\n}\n\ninterface Props {\n  messages: Message[];\n}\n\nconst useStyles = makeStyles({\n  chatBubble: {\n    backgroundColor: \"#BED6DB\",\n    borderRadius: \"20px\",\n    color: \"#fff\",\n    padding: \"10px\",\n    position: \"relative\",\n    zIndex: 1,\n    maxWidth: \"75%\",\n    width: \"auto\",\n    marginBottom: \"10px\",\n    \"&:after\": {\n      content: '\"\"',\n      top: \"1px\",\n      left: \"-29px\",\n      position: \"absolute\",\n      border: \"0px solid\",\n      display: \"block\",\n      width: \"38px\",\n      height: \"26px\",\n      backgroundColor: \"transparent\",\n      borderBottomLeftRadius: \"50%\",\n      borderBottomRightRadius: \"50%\",\n      boxShadow: \"21px 9px 0px 8px #BED6DB\",\n    },\n  },\n  userBubble: {\n    backgroundColor: \"#8FCAE7\",\n    borderRadius: \"20px\",\n    color: \"#fff\",\n    padding: \"10px\",\n    position: \"relative\",\n    zIndex: 1,\n    width: \"auto\",\n    marginBottom: \"10px\",\n    \"&:after\": {\n      content: '\"\"',\n      top: \"1px\",\n      right: \"-29px\",\n      position: \"absolute\",\n      border: \"0px solid\",\n      display: \"block\",\n      width: \"38px\",\n      height: \"26px\",\n      backgroundColor: \"transparent\",\n      borderBottomLeftRadius: \"50%\",\n      borderBottomRightRadius: \"50%\",\n      boxShadow: \"-21px 9px 0px 8px #8FCAE7\",\n    },\n  },\n  bubbleText: {\n    padding: \"10px\",\n    position: \"relative\",\n    zIndex: 1,\n  },\n  chatAvatar: {\n    marginRight: \"20px\",\n    width: \"50px\",\n    height: \"50px\",\n    borderRadius: \"50%\",\n  },\n  userAvatar: {\n    marginRight: \"10px\",\n    marginLeft: \"20px\",\n    width: \"50px\",\n    height: \"50px\",\n    borderRadius: \"50%\",\n  },\n  chatRow: {\n    display: \"flex\",\n    alignItems: \"flex-start\",\n  },\n  userRow: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    width: \"100%\",\n    alignItems: \"flex-end\"\n  },\n  userChatContainer: {\n    maxWidth: \"75%\",\n    display: \"flex\",\n  },\n  messagesContainer: {\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    maxHeight: \"50vh\",\n    overflowY: \"auto\"\n  }\n});\n\nconst ChatGrid = ({ messages }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2} style={{ padding: \"5%\" }}>\n      <Grid item xs={12}>\n        <List className={classes.messagesContainer}>\n          {messages.map((message, idx) => (\n            <div className={message.sender === \"Grace\" ? classes.chatRow : classes.userRow} key={idx}>\n              {message.sender === \"Grace\" && <Avatar alt=\"Grace\" src={Grace2} className={classes.chatAvatar} />}\n              <div className={classes.userChatContainer}>\n                <ListItem\n                  key={message.id}\n                  className={message.sender === \"Grace\" ? classes.chatBubble : classes.userBubble}\n                >\n                  <ListItemText primary={message.sender} secondary={message.text} className={classes.bubbleText} />\n                </ListItem>\n                {message.sender === \"User\" && (\n                  <Avatar alt=\"User\" className={classes.userAvatar}>\n                    <PersonIcon />\n                  </Avatar>\n                )}\n              </div>\n            </div>\n          ))}\n        </List>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ChatGrid;"
    },
    {
      "id": 107,
      "projectId": 3,
      "description": "Landing Page",
      "code": "import { useContext, useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport TopNav from \"../components/TopNav\";\nimport BottomNav from \"../components/BottomNav\";\nimport MessageInput from \"../components/MessageInput\";\nimport ChatGrid from \"../components/ChatGrid\";\nimport isEqual from \"lodash.isequal\";\nimport ChatCompletionContext, { GptMessage } from \"../contexts/ChatCompletionContext\";\nimport ChatCompletionContextProvider from \"../components/ChatCompletionContextProvider\";\n\ninterface Message {\n  id: number;\n  sender: string;\n  text: string;\n}\n\nconst LandingBody = () => {\n  const auth0 = useAuth0();\n  const userEmail = auth0?.user?.email;\n\n  const chatCompletionProvider = useContext(ChatCompletionContext);\n\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [addedMessages, setAddedMessages] = useState([] as Array<GptMessage>);\n\n  useEffect(() => {\n    const newGptMessages = chatCompletionProvider.completionContext.messagesSuccessfullyAddedToConversation;\n\n    if (isEqual(addedMessages, newGptMessages)) {\n      return;\n    }\n    setAddedMessages(newGptMessages);\n\n    // map GptMessage to Message\n    const newMessages = newGptMessages\n      .filter(gptMsg => {\n        return gptMsg.role === \"user\" || gptMsg.role === \"assistant\";\n      })\n      .map(gptMsg => {\n        return {\n          id: gptMsg.role === \"user\" ? 2 : 1,\n          sender: gptMsg.role === \"user\" ? \"User\" : \"Grace\",\n          text: gptMsg.content\n        };\n      });\n\n    setMessages([...messages, ...newMessages]);\n  }, [messages, chatCompletionProvider]);\n\n  const addMessage = (message: string) => {\n    const trimmedMessage = message?.trim();\n    if (!trimmedMessage) {\n      return;\n    }\n\n    chatCompletionProvider.sendNextMessage({\n      role: \"user\",\n      content: `USER: ${trimmedMessage}`\n    });\n  };\n\n  return (\n    <>\n      <TopNav />\n      <ChatGrid messages={messages} />\n      <MessageInput onAddMessage={addMessage} />\n      <BottomNav />\n    </>\n  );\n};\n\nexport default LandingBody;"
    },
    {
      "id": 108,
      "projectId": 3,
      "description": "Message Input",
      "code": "import React, { useState } from \"react\";\nimport { Grid, TextField, Button, ThemeProvider, createTheme, makeStyles } from \"@material-ui/core\";\n\ninterface Message {\n  id: number;\n  sender: string;\n  text: string;\n}\n\ninterface Props {\n  onAddMessage: (message: string) => void;\n}\n\nconst buttonTheme = createTheme({\n  palette: {\n    primary: {\n      main: \"#0099CC\",\n    },\n    secondary: {\n      main: \"#005172\",\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  messageInputContainer: {\n    position: \"fixed\",\n    bottom: \"0px\",\n    left: \"0\",\n    right: \"0\",\n    zIndex: 999,\n    padding: \"5% 5%\",\n    backgroundImage: \"linear-gradient(to bottom, transparent, white)\",\n  },\n});\n\nconst MessageInput = (props: Props) => {\n  const [message, setMessage] = useState(\"\");\n  const classes = useStyles();\n\n  const handleMessageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMessage(event.target.value);\n  };\n\n  const handleAddMessage = () => {\n    if (message.trim()) {\n      const newMessage: Message = {\n        id: Date.now(),\n        sender: \"User\",\n        text: message,\n      };\n      props.onAddMessage(message.trim());\n      setMessage(\"\");\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      handleAddMessage();\n    }\n  }\n\n  return (\n    <ThemeProvider theme={buttonTheme}>\n      <div className={classes.messageInputContainer}>\n        <Grid container spacing={1}>\n          <Grid item xs={9}>\n            <TextField\n              variant=\"standard\"\n              placeholder=\"Type a message\"\n              fullWidth\n              value={message}\n              onChange={handleMessageChange}\n              onKeyPress={handleKeyPress}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              onClick={handleAddMessage}\n            >\n              Send\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default MessageInput;"
    },
    {
      "id": 109,
      "projectId": 4,
      "description": "Container Selector",
      "code": "import React, { useEffect, useState } from \"react\";\nimport { useId } from \"@fluentui/react-components\";\nimport { Dropdown, IDropdownOption } from \"@fluentui/react/lib/Dropdown\";\nimport { IContainer } from \"../../../common/schemas/ContainerSchemas\";\nimport { ContainersApiProvider } from \"../providers/ContainersApiProvider\";\n\nconst containersApi = ContainersApiProvider.instance;\n\nexport type IContainerSelectorProps = {\n  selectedContainerId?: string;\n  onContainerSelected?: (container: IContainer) => void;\n  refreshKey?: number;\n};\n\nexport const ContainerSelector: React.FunctionComponent<IContainerSelectorProps> = (props: IContainerSelectorProps) => {\n  const [containers, setContainers] = useState<IContainer[] | undefined>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [selectedContainerId, setSelectedContainerId] = useState<string | undefined>(props.selectedContainerId);\n  const containerSelector = useId(\"containerSelector\");\n\n  useEffect(() => {\n    setLoading(true);\n    containersApi\n      .list()\n      .then(setContainers)\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  }, [props.refreshKey]);\n\n  const onContainerDropdownChange = (\n    event: React.FormEvent<HTMLDivElement>,\n    option?: IDropdownOption\n  ) => {\n    const selected = containers?.find((container) => container.id === option?.key);\n    if (selected) {\n      setSelectedContainerId(selected.id);\n      props.onContainerSelected?.(selected);\n    }\n  };\n\n  const dropdownOptions: IDropdownOption[] = containers\n    ? containers.map((container) => ({\n        key: container.id,\n        text: container.displayName,\n      }))\n    : [];\n\n  return (\n    <Dropdown\n      id={containerSelector}\n      disabled={loading}\n      placeholder=\"Select\"\n      options={dropdownOptions}\n      selectedKey={selectedContainerId}\n      className=\"container-selector-controls\"\n      onChange={onContainerDropdownChange}\n    />\n  );\n};"
    },
    {
      "id": 110,
      "projectId": 4,
      "description": "Jobs Listing Page",
      "code": "import \"./App.css\";\nimport { Link, useActionData, useLoaderData } from \"react-router-dom\";\nimport { ILoaderParams } from \"../common/ILoaderParams\";\nimport { JobsApiProvider } from \"../providers/JobsApiProvider\";\nimport {\n  IJob,\n  IJobClientCreateRequest,\n} from \"../../../common/schemas/JobSchemas\";\nimport { Tag } from \"@fluentui/react-components\";\nimport { Pivot, PivotItem } from \"@fluentui/react\";\nimport { MarqueeSelection } from \"@fluentui/react/lib/MarqueeSelection\";\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  Selection,\n  IColumn,\n  IDetailsListStyles,\n} from \"@fluentui/react/lib/DetailsList\";\nimport { TooltipHost, ITooltipHostStyles } from \"@fluentui/react/lib/Tooltip\";\nimport { Job } from \"../model/Job\";\nimport { getFileTypeIconProps } from \"@fluentui/react-file-type-icons\";\nimport { Icon, Link as FluentLink } from \"@fluentui/react\";\nimport { CreateJobPostingButton } from \"../components/CreateJobPostingButton\";\n\nimport { useRef, useState, useEffect } from \"react\";\nimport {} from \"@fluentui/react-icons\";\n\nexport async function loader({ params }: ILoaderParams): Promise<Job[]> {\n  const jobsLite = await JobsApiProvider.instance.list();\n  const jobs = jobsLite.map(async (job) => {\n    return await JobsApiProvider.instance.get(job.id);\n  });\n  return Promise.all(jobs);\n}\n\nexport async function action({ params, request }: ILoaderParams) {\n  const formData = await request.formData();\n  const job = Object.fromEntries(formData) as IJobClientCreateRequest;\n  return await JobsApiProvider.instance.create(job);\n}\n\nconst detailListStyles: Partial<IDetailsListStyles> = {\n  root: { marginTop: \"20px\" },\n  headerWrapper: { backgroundColor: \"#f4f7fa !important\", fontWeight: \"bold\" },\n};\n\nconst tooltipHostStyles: Partial<ITooltipHostStyles> = {\n  root: {\n    display: \"inline-block\",\n    marginLeft: \"8px\",\n  },\n};\n\nexport const Jobs: React.FunctionComponent = () => {\n  const jobs = useLoaderData() as IJob[];\n  const job = useActionData() as IJob | undefined;\n  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);\n  const [filteredJobs, setFilteredJobs] = useState<IJob[]>(jobs);\n  const [currentFilter, setCurrentFilter] = useState<string>(\"all\");\n  const [hideDialog, setHideDialog] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [formResetTrigger, setFormResetTrigger] = useState(0);\n\n  useEffect(() => {\n    if (job) {\n      setSaving(false);\n      setHideDialog(true);\n      setFormResetTrigger((prev) => prev + 1);\n    }\n  }, [job]);\n\n  const selection = useRef(\n    new Selection({\n      onSelectionChanged: () => selectionChangedHandler(),\n    })\n  ).current;\n\n  const selectionChangedHandler = () => {\n    const currentSelectedKeys = selection\n      .getSelection()\n      .map(({ key }) => key as string);\n    setSelectedKeys(currentSelectedKeys);\n  };\n\n  const handleFilterChange = (item?: PivotItem) => {\n    setCurrentFilter(item?.props.itemKey || \"all\");\n  };\n\n  useEffect(() => {\n    let sortedFilteredJobs = [...jobs];\n    if (currentFilter === \"recent\") {\n      sortedFilteredJobs.sort(\n        (a, b) =>\n          new Date(b.createdDateTime || 0).getTime() -\n          new Date(a.createdDateTime || 0).getTime()\n      );\n    }\n    setFilteredJobs(sortedFilteredJobs);\n  }, [currentFilter, jobs]);\n\n  const columns: IColumn[] = [\n    {\n      key: \"displayName\",\n      name: \"Job Title\",\n      fieldName: \"displayName\",\n      minWidth: 100,\n      maxWidth: 200,\n      isResizable: true,\n      onRender: (job: Job) => <Link to={job.id}>{job.displayName}</Link>,\n      styles: {\n        cellTitle: {\n          display: \"flex\",\n          alignItems: \"center\",\n        },\n      },\n    },\n    {\n      key: \"description\",\n      name: \"Description\",\n      fieldName: \"description\",\n      minWidth: 200,\n      maxWidth: 300,\n      isResizable: true,\n      onRender: (job: Job) => <span>{job.description}</span>,\n      styles: {\n        cellTitle: {\n          display: \"flex\",\n          alignItems: \"center\",\n        },\n      },\n    },\n    {\n      key: \"createdDate\",\n      name: \"Created\",\n      fieldName: \"createdDate\",\n      minWidth: 50,\n      maxWidth: 100,\n      isResizable: true,\n      onRender: (job: Job) => {\n        const date = new Date(job.createdDateTime ?? 0);\n        const formattedDate = date.toLocaleDateString();\n        return <span>{formattedDate}</span>;\n      },\n      styles: {\n        cellTitle: {\n          display: \"flex\",\n          alignItems: \"center\",\n        },\n      },\n    },\n    {\n      key: \"state\",\n      name: \"State\",\n      fieldName: \"state\",\n      minWidth: 25,\n      maxWidth: 100,\n      isResizable: true,\n      onRender: (job: Job) => (\n        <div\n          style={{\n            display: \"inline-block\",\n            padding: \"2px 8px\",\n            background: \"#E4F1FD\",\n            color: \"#0F6CBD\",\n          }}\n        >\n          <Tag appearance=\"brand\">{job.state}</Tag>\n        </div>\n      ),\n      styles: {\n        cellTitle: {\n          display: \"flex\",\n          alignItems: \"center\",\n        },\n      },\n    },\n    {\n      key: \"posting\",\n      name: (\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Posting Document\n          <TooltipHost\n            content=\"Developers can use SharePoint Embedded containers to easily secure content at the application level. For example, all job specific content is stored in it's own container.\"\n            id=\"postingTooltip\"\n            calloutProps={{ gapSpace: 0 }}\n            styles={tooltipHostStyles}\n          >\n            <Icon\n              iconName=\"Info20Regular\"\n              aria-describedby=\"postingTooltip\"\n              style={{ fontSize: \"16px\", color: \"red\", marginLeft: \"4px\" }}\n            />\n          </TooltipHost>\n        </div>\n      ) as any,\n      fieldName: \"posting\",\n      minWidth: 100,\n      maxWidth: 200,\n      isResizable: true,\n      styles: {\n        cellTitle: {\n          display: \"flex\",\n          alignItems: \"center\",\n        },\n      },\n      onRender: (job: Job) => {\n        const iconProps = getFileTypeIconProps({ extension: \"docx\", size: 24 });\n\n        return (\n          <>\n            {job.postingDoc && job.postingDoc.name && job.postingDoc.webUrl && (\n              <>\n                <Icon {...iconProps} />\n                <FluentLink\n                  href={job.postingDoc.webUrl}\n                  target=\"_blank\"\n                  style={{ paddingLeft: \"5px\" }}\n                >\n                  {job.postingDoc.name}\n                </FluentLink>\n              </>\n            )}\n          </>\n        );\n      },\n    },\n  ];\n\nreturn (\n  <div>\n    <div className=\"spe-job-header\">\n      <div className=\"spe-job-header-filter\">\n        <Pivot\n          aria-label=\"Filter Jobs\"\n          selectedKey={currentFilter}\n          onLinkClick={handleFilterChange}\n        >\n          <PivotItem headerText=\"All\" itemKey=\"all\" />\n          <PivotItem headerText=\"Recent\" itemKey=\"recent\" />\n        </Pivot>\n      </div>\n      <div className=\"spe-job-header-filter\">\n        <CreateJobPostingButton\n          hideDialog={hideDialog}\n          setHideDialog={setHideDialog}\n          saving={saving}\n          setSaving={setSaving}\n          formResetTrigger={formResetTrigger}\n        />\n      </div>\n    </div>\n    <div style={{ height: \"600px\", overflowY: \"auto\" }}>\n      <MarqueeSelection selection={selection}>\n        <DetailsList\n          items={filteredJobs}\n          columns={columns}\n          selection={selection}\n          setKey=\"set\"\n          layoutMode={DetailsListLayoutMode.justified}\n          selectionPreservedOnEmptyClick={true}\n          ariaLabelForSelectionColumn=\"Toggle selection\"\n          ariaLabelForSelectAllCheckbox=\"Toggle selection for all items\"\n          checkButtonAriaLabel=\"select row\"\n          styles={detailListStyles}\n        />\n      </MarqueeSelection>\n    </div>\n  </div>\n);"
    },
    {
      "id": 111,
      "projectId": 5,
      "description": "Side Menu Left Container and Triggers",
      "code": "import { SideMenuLeftClosed } from \"./SideMenuLeftClosed\";\nimport { SideMenuLeftOpen } from \"./SideMenuLeftOpen\";\nimport { ProjectList, TaskList } from \"../../libs/interfaces\";\n\ninterface SideMenuLeftProps {\n  projects: ProjectList;\n  isOpen: boolean;\n  togglePanel: () => void;\n  countTaskForProject: (projectId: string) => Promise<number>;\n}\n\nexport const SideMenuLeft = ({\n  projects,\n  isOpen,\n  togglePanel,\n  countTaskForProject,\n}: SideMenuLeftProps) => {\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\" }}>\n      <div\n        className={`side-panel ${isOpen ? \"open\" : \"closed\"}`}\n        style={{\n          background: \"#141718\",\n          height: \"100%\",\n          position: \"fixed\",\n          left: 0,\n          top: 0,\n          width: isOpen ? \"489px\" : \"96px\",\n          transition: \"width 0.3s\",\n        }}\n      >\n        {isOpen ? (\n          <SideMenuLeftOpen\n            toggleSidePanel={togglePanel}\n            projects={projects}\n            countTaskForProject={countTaskForProject}\n          />\n        ) : (\n          <SideMenuLeftClosed\n            toggleSidePanel={togglePanel}\n            projects={projects}\n          />\n        )}\n      </div>\n    </div>\n  );\n};"
    },
    {
      "id": 112,
      "projectId": 5,
      "description": "Side Menu Left Closed",
      "code": "import Image from \"next/image\";\nimport NextLink from \"next/link\";\nimport { MouseEventHandler } from \"react\";\nimport { BsChatText, BsFillPlusCircleFill } from \"react-icons/bs\";\nimport { FaSquare } from \"react-icons/fa\";\nimport { IoIosBarcode } from \"react-icons/io\";\nimport { IoSearch, IoSettingsOutline } from \"react-icons/io5\";\nimport { RiBankCardLine } from \"react-icons/ri\";\nimport { TbLayoutSidebarLeftExpand } from \"react-icons/tb\";\nimport { ProjectList } from \"../../libs/interfaces\";\n\ninterface SideMenuLeftOpenProps {\n  toggleSidePanel: MouseEventHandler<SVGElement> | undefined;\n  projects: ProjectList;\n}\n\nexport const SideMenuLeftClosed = ({\n  toggleSidePanel,\n  projects,\n}: SideMenuLeftOpenProps) => {\n  return (\n    <div\n      style={{\n        width: \"96px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        position: \"relative\",\n        height: \"100%\",\n      }}\n    >\n      <Image\n        src=\"/KNOVVA.AI Icon.png\"\n        alt=\"KNOVVA.AI Icon\"\n        width=\"80\"\n        height=\"120\"\n        style={{ margin: \"15px\" }}\n      />\n      <div\n        className=\"content\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          flexGrow: 1,\n          paddingTop: \"40px\",\n          overflowY: \"auto\",\n        }}\n      >\n        <ul\n          className=\"menu\"\n          style={{ listStyleType: \"none\", padding: 0, margin: 0 }}\n        >\n          <NextLink href=\"/dashboard\">\n            <BsChatText\n              style={{\n                width: \"24px\",\n                height: \"24px\",\n                cursor: \"pointer\",\n                marginBottom: \"24px\",\n                color: \"#BDE3FF\",\n              }}\n            />\n          </NextLink>\n          <IoSearch\n            style={{\n              width: \"24px\",\n              height: \"24px\",\n              cursor: \"pointer\",\n              marginBottom: \"24px\",\n              color: \"#BDE3FF\",\n            }}\n          />\n          <RiBankCardLine\n            style={{\n              width: \"24px\",\n              height: \"24px\",\n              cursor: \"pointer\",\n              marginBottom: \"24px\",\n              color: \"#BDE3FF\",\n            }}\n          />\n          <IoIosBarcode\n            style={{\n              width: \"24px\",\n              height: \"24px\",\n              cursor: \"pointer\",\n              marginBottom: \"24px\",\n              color: \"#BDE3FF\",\n            }}\n          />\n          <IoSettingsOutline\n            style={{\n              width: \"24px\",\n              height: \"24px\",\n              cursor: \"pointer\",\n              marginBottom: \"24px\",\n              color: \"#BDE3FF\",\n            }}\n          />\n          <div\n            className=\"divider\"\n            style={{\n              width: \"24px\",\n              height: \"24px\",\n              marginBottom: \"24px\",\n            }}\n          ></div>\n          {projects &&\n            projects.projects.map((project, index) => (\n              <FaSquare\n                key={index}\n                style={{\n                  width: \"24px\",\n                  height: \"24px\",\n                  cursor: \"pointer\",\n                  marginBottom: \"24px\",\n                  color:\n                    index % 3 === 0\n                      ? \"rgba(108, 114, 117, 0.5)\"\n                      : index % 3 === 1\n                      ? \"rgba(142, 85, 234, 1)\"\n                      : \"rgba(62, 144, 240, 1)\",\n                }}\n              />\n            ))}\n          <BsFillPlusCircleFill\n            style={{\n              width: \"24px\",\n              height: \"24px\",\n              cursor: \"pointer\",\n              marginBottom: \"24px\",\n            }}\n          />\n        </ul>\n      </div>\n      <div\n        className=\"content-footer\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          width: \"100%\",\n        }}\n      >\n        <TbLayoutSidebarLeftExpand\n          onClick={toggleSidePanel}\n          style={{\n            width: \"30px\",\n            height: \"30px\",\n            color: \"rgba(189, 227, 255, 1)\",\n            cursor: \"pointer\",\n            marginBottom: \"96px\",\n          }}\n        />\n        <NextLink href=\"/api/auth/signin\">\n          <div\n            className=\"avatar online placeholder\"\n            style={{ marginBottom: \"24px\" }}\n          >\n            <div\n              className=\"bg-neutral text-neutral-content w-40 rounded-full\"\n              style={{\n                width: \"60px\",\n                height: \"60px\",\n              }}\n            >\n              <Image src=\"/Avatar1.jpg\" alt=\"Nolan\" width=\"60\" height=\"60\" />\n            </div>\n          </div>\n        </NextLink>\n      </div>\n    </div>\n  );\n};"
    },
    {
      "id": 113,
      "projectId": 5,
      "description": "Side Menu Left Open",
      "code": "import Image from \"next/image\";\nimport NextLink from \"next/link\";\nimport { MouseEventHandler, useEffect, useState } from \"react\";\nimport { BsChatText, BsFillPlusCircleFill } from \"react-icons/bs\";\nimport { FaSquare } from \"react-icons/fa\";\nimport { IoIosBarcode } from \"react-icons/io\";\nimport { IoSettingsOutline } from \"react-icons/io5\";\nimport { RiBankCardLine } from \"react-icons/ri\";\nimport { TbLayoutSidebarLeftCollapse } from \"react-icons/tb\";\nimport { ProjectList } from \"../../libs/interfaces\";\n\ninterface SideMenuLeftOpenProps {\n  toggleSidePanel: MouseEventHandler<SVGElement> | undefined;\n  projects: ProjectList;\n  countTaskForProject: (projectId: string) => Promise<number>;\n}\n\nconst TaskCount = ({\n  projectId,\n  countTaskForProject,\n}: {\n  projectId: string;\n  countTaskForProject: (projectId: string) => Promise<number>;\n}) => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const fetchCount = async () => {\n      const result = await countTaskForProject(projectId);\n      setCount(result);\n    };\n    fetchCount();\n  }, [projectId, countTaskForProject]);\n\n  return <>{count}</>;\n};\n\nexport const SideMenuLeftOpen = ({\n  toggleSidePanel,\n  projects,\n  countTaskForProject,\n}: SideMenuLeftOpenProps) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100vh\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n          width: \"489px\",\n          height: \"100vh\",\n          padding: \"38px\",\n          boxSizing: \"border-box\",\n        }}\n      >\n        <div\n          className=\"header\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            margin: \"15px\",\n          }}\n        >\n          <Image\n            src=\"/Logo.png\"\n            alt=\"Logo\"\n            width=\"320\"\n            height=\"689\"\n            style={{ marginRight: \"15px\" }}\n          />\n          <TbLayoutSidebarLeftCollapse\n            onClick={toggleSidePanel}\n            style={{\n              width: \"30px\",\n              height: \"30px\",\n              color: \"rgba(189, 227, 255, 1)\",\n              cursor: \"pointer\",\n            }}\n          />\n        </div>\n        <div\n          className=\"content\"\n          style={{\n            alignItems: \"left\",\n            flexGrow: 1,\n            paddingTop: \"40px\",\n            overflowY: \"auto\",\n          }}\n        >\n          <ul\n            className=\"menu\"\n            style={{ listStyleType: \"none\", padding: 0, margin: 0 }}\n          >\n            <li>\n              <NextLink href=\"/dashboard\">\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    cursor: \"pointer\",\n                    margin: \"12px 0\",\n                  }}\n                >\n                  <BsChatText\n                    style={{\n                      width: \"24px\",\n                      height: \"24px\",\n                      marginRight: \"15px\",\n                      color: \"#BDE3FF\",\n                    }}\n                  />\n                  <p\n                    style={{\n                      margin: 0,\n                      color: \"var(--neutral-0375, rgba(232, 236, 239, 0.75))\",\n                      fontFamily: \"Roboto\",\n                      fontSize: \"14px\",\n                      fontStyle: \"normal\",\n                      fontWeight: 600,\n                      lineHeight: \"24px\",\n                      letterSpacing: \"-0.28px\",\n                    }}\n                  >\n                    Dashboard\n                  </p>\n                </div>\n              </NextLink>\n            </li>\n            <li>\n              <NextLink href=\"\">\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    cursor: \"pointer\",\n                    margin: \"12px 0\",\n                  }}\n                >\n                  <RiBankCardLine\n                    style={{\n                      width: \"24px\",\n                      height: \"24px\",\n                      marginRight: \"15px\",\n                      color: \"#BDE3FF\",\n                    }}\n                  />\n                  <p\n                    style={{\n                      margin: 0,\n                      color: \"var(--neutral-0375, rgba(232, 236, 239, 0.75))\",\n                      fontFamily: \"Roboto\",\n                      fontSize: \"14px\",\n                      fontStyle: \"normal\",\n                      fontWeight: 600,\n                      lineHeight: \"24px\",\n                      letterSpacing: \"-0.28px\",\n                    }}\n                  >\n                    My Team\n                  </p>\n                </div>\n              </NextLink>\n            </li>\n            <li>\n              <NextLink href=\"\">\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    cursor: \"pointer\",\n                    margin: \"12px 0\",\n                  }}\n                >\n                  <IoIosBarcode\n                    style={{\n                      width: \"24px\",\n                      height: \"24px\",\n                      marginRight: \"15px\",\n                      color: \"#BDE3FF\",\n                    }}\n                  />\n                  <p\n                    style={{\n                      margin: 0,\n                      color: \"var(--neutral-0375, rgba(232, 236, 239, 0.75))\",\n                      fontFamily: \"Roboto\",\n                      fontSize: \"14px\",\n                      fontStyle: \"normal\",\n                      fontWeight: 600,\n                      lineHeight: \"24px\",\n                      letterSpacing: \"-0.28px\",\n                    }}\n                  >\n                    Integrations\n                  </p>\n                </div>\n              </NextLink>\n            </li>\n            <li>\n              <NextLink href=\"\">\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    cursor: \"pointer\",\n                    margin: \"12px 0\",\n                  }}\n                >\n                  <IoSettingsOutline\n                    style={{\n                      width: \"24px\",\n                      height: \"24px\",\n                      marginRight: \"15px\",\n                      color: \"#BDE3FF\",\n                    }}\n                  />\n                  <p\n                    style={{\n                      margin: 0,\n                      color: \"var(--neutral-0375, rgba(232, 236, 239, 0.75))\",\n                      fontFamily: \"Roboto\",\n                      fontSize: \"14px\",\n                      fontStyle: \"normal\",\n                      fontWeight: 600,\n                      lineHeight: \"24px\",\n                      letterSpacing: \"-0.28px\",\n                    }}\n                  >\n                    Settings\n                  </p>\n                </div>\n              </NextLink>\n            </li>\n          </ul>\n          <div\n            className=\"divider\"\n            style={{\n              height: \"24px\",\n              cursor: \"pointer\",\n              margin: \"12px 0\",\n            }}\n          ></div>\n          <div className=\"collapse collapse-arrow \">\n            <input type=\"checkbox\" defaultChecked />\n            <div className=\"collapse-title text-xl font-medium\">\n              My Projects\n            </div>\n            <div className=\"collapse-content\" style={{ marginTop: \"14px\" }}>\n              <ul\n                className=\"menu\"\n                style={{ listStyleType: \"none\", padding: 0, margin: 0 }}\n              >\n                {projects.projects.map((project, index) => (\n                  <li key={project.id}>\n                    <NextLink href={`/project/${project.id}`}>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          cursor: \"pointer\",\n                          margin: \"12px 0\",\n                        }}\n                      >\n                        <FaSquare\n                          style={{\n                            width: \"24px\",\n                            height: \"24px\",\n                            marginRight: \"15px\",\n                            color: \"#BDE3FF\",\n                          }}\n                        />\n                        <p\n                          style={{\n                            margin: 0,\n                            color: \"var(--neutral-0375, rgba(232, 236, 239, 0.75))\",\n                            fontFamily: \"Roboto\",\n                            fontSize: \"14px\",\n                            fontStyle: \"normal\",\n                            fontWeight: 600,\n                            lineHeight: \"24px\",\n                            letterSpacing: \"-0.28px\",\n                          }}\n                        >\n                          {project.name}\n                        </p>\n                        <span\n                          style={{\n                            backgroundColor: \"#0056D6\",\n                            borderRadius: \"15px\",\n                            padding: \"3px 10px\",\n                            marginLeft: \"15px\",\n                            fontSize: \"14px\",\n                            color: \"#BDE3FF\",\n                            marginTop: \"3px\",\n                            textAlign: \"center\",\n                          }}\n                        >\n                          <TaskCount\n                            projectId={project.id}\n                            countTaskForProject={countTaskForProject}\n                          />\n                        </span>\n                      </div>\n                    </NextLink>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <NextLink href=\"\">\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                cursor: \"pointer\",\n                margin: \"12px 0\",\n              }}\n            >\n              <BsFillPlusCircleFill\n                style={{\n                  width: \"24px\",\n                  height: \"24px\",\n                  marginRight: \"15px\",\n                  color: \"#BDE3FF\",\n                }}\n              />\n              <p\n                style={{\n                  margin: 0,\n                  color: \"var(--neutral-0375, rgba(232, 236, 239, 0.75))\",\n                  fontFamily: \"Roboto\",\n                  fontSize: \"14px\",\n                  fontStyle: \"normal\",\n                  fontWeight: 600,\n                  lineHeight: \"24px\",\n                  letterSpacing: \"-0.28px\",\n                }}\n              >\n                New Project\n              </p>\n            </div>\n          </NextLink>\n        </div>\n      </div>\n    </div>\n  );\n};\n"
    }
  ],
  "dotnet": [
    {
      "id": 201,
      "projectId": 1,
      "description": "REST APIs for Album Service",
      "code": "public class AlbumService : IAlbumService\n{\n    public IDataProvider _data = null;\n\n    public AlbumService(IDataProvider data)\n    {\n        _data = data;\n    }\n\n    public int Add(AlbumAddRequest model, int userId)\n    {\n        int id = 0;\n        string procName = \"[dbo].[Albums_Insert]\";\n        _data.ExecuteNonQuery(procName,\n            inputParamMapper: delegate (SqlParameterCollection col)\n            {\n                AddCommonParams(model, col, userId);\n                SqlParameter idOut = new SqlParameter(\"@Id\", SqlDbType.Int);\n                idOut.Direction = ParameterDirection.Output;\n                col.Add(idOut);\n\n            }, returnParameters: delegate (SqlParameterCollection returnCollection)\n            {\n                object oId = returnCollection[\"@Id\"].Value;\n                int.TryParse(oId.ToString(), out id);\n            });\n        return id;\n    }\n\n    public void Update(AlbumUpdateRequest model, int userId)\n    {\n        string procName = \"[dbo].[Albums_Update]\";\n        _data.ExecuteNonQuery(procName,\n            inputParamMapper: delegate (SqlParameterCollection col)\n            {\n                AddCommonParams(model, col, userId);\n                col.AddWithValue(\"@Id\", model.Id);\n            }, returnParameters: null);\n    }\n\n    public void Delete(int id)\n    {\n        string procName = \"[dbo].[Albums_Delete_ById]\";\n        _data.ExecuteNonQuery(procName,\n        inputParamMapper: delegate (SqlParameterCollection col)\n        {\n            col.AddWithValue(\"@Id\", id);\n        }, returnParameters: null);\n    }\n\n    public Album Get(int id)\n    {\n        string procName = \"[dbo].[Albums_Select_ById]\";\n        Album aAlbum = null;\n        _data.ExecuteCmd(procName,\n            inputParamMapper: delegate (SqlParameterCollection paramCollection)\n        {\n            paramCollection.AddWithValue(\"@Id\", id);\n\n        }, singleRecordMapper: delegate (IDataReader reader, short set)\n        {\n            aAlbum = MapAlbum(reader, out int startingIndex);\n\n        });\n        return aAlbum;\n    }\n}"
    },
    {
      "id": 202,
      "projectId": 1,
      "description": "SendGrid to Send Email Notifications to Users",
      "code": "public class EmailService : IEmailService\n{\n    private IWebHostEnvironment _env;\n    private AppKeys _appKeys;\n\n    public EmailService(IWebHostEnvironment env, IOptions<AppKeys> appKeys)\n    {\n        _env = env;\n        _appKeys = appKeys.Value;\n    }\n\n    public async void Add(EmailsAddRequest model)\n    {\n        var path = \"/EmailTemplate/Test.html\";\n        var filePath = _env.WebRootPath + path;\n        var htmlContent = System.IO.File.ReadAllText(filePath).Replace(\"{{&&message}}\", \"Welcome!\");\n        SendGridMessage message = new SendGridMessage()\n        {\n            From = new EmailAddress(\"devteam@gmail.com\", \"Dev Team\"),\n            Subject = model.Subject,\n            PlainTextContent = model.PlainTextContent,\n            HtmlContent = htmlContent\n        };\n        message.AddTo(model.To);\n        await Send(message);\n    }\n\n    private async Task Send(SendGridMessage message)\n    {\n        var client = new SendGridClient(_appKeys.SendGridAppKey);\n        await client.SendEmailAsync(message);\n    }\n}"
    }
  ],
  "html": [
    {
      "id": 301,
      "projectId": 2,
      "description": "Allows user to generate a User Story off of Figma diagrams",
      "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <style>\n      body {\n        font-family: \"Roboto\", sans-serif;\n        background-color: #f4f4f4;\n        color: #333;\n        padding: 20px;\n        margin: 0;\n        height: 2000px;\n      }\n      h3 {\n        color: #2a2a2a;\n        font-weight: 500;\n      }\n      input,\n      button,\n      textarea,\n      select {\n        font-family: \"Roboto\", sans-serif;\n        padding: 12px 15px;\n        margin-top: 8px;\n        width: 100%;\n        box-sizing: border-box;\n        border: 2px solid #ddd;\n        border-radius: 5px;\n        transition: all 0.3s ease;\n      }\n      input:focus,\n      textarea:focus,\n      select:focus {\n        border-color: #0056b3;\n        box-shadow: 0 0 8px rgba(0, 86, 179, 0.2);\n      }\n      button {\n        background-image: linear-gradient(45deg, #6ab04c, #26de81);\n        color: white;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      }\n      button:hover {\n        background-image: linear-gradient(45deg, #26de81, #6ab04c);\n        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.15);\n      }\n      div {\n        margin-top: 10px;\n        padding: 15px;\n        background-color: white;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      }\n      #finalPayloadPreview {\n        background-color: #e8f8f5;\n        border-left: 5px solid #26de81;\n      }\n      p {\n        margin: 10px 0;\n        position: relative;\n      }\n      .edit-icon {\n        position: absolute;\n        right: 5px;\n        top: 50%;\n        transform: translateY(-80%) scaleX(-1);\n        cursor: pointer;\n      }\n      .save-button {\n        right: 5px;\n        top: 50%;\n        cursor: pointer;\n        transform: translateY(-50%);\n        width: 25%;\n        margin-top: 25px;\n        display: block;\n      }\n      span {\n        display: inline-block;\n        max-width: 90%;\n        word-wrap: break-word;\n      }\n      .spinner {\n        position: absolute;\n        top: 1250px;\n        left: 40%;\n        transform: translateX(-50%, -50%);\n        z-index: 9999;\n        border: 4px solid rgba(0, 0, 0, 0.1);\n        border-top: 4px solid #3498db;\n        border-radius: 50%;\n        width: 30px;\n        height: 30px;\n        animation: spin 1s linear infinite;\n        display: none;\n      }\n      @keyframes spin {\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n    </style>\n  </head>\n  <body>\n    <h3>Create a User Story</h3>\n    <p>\n      Tone:\n      <textarea\n        id=\"tone\"\n        placeholder=\"Ex. for a health insurance company\"\n        style=\"width: 90%; height: 100px\"\n      ></textarea>\n    </p>\n    <p>\n      Format:\n      <textarea\n        id=\"format\"\n        placeholder=\"Ex. As a Blank, I want to be able to Blank so that I can blank.\"\n        style=\"width: 90%; height: 100px\"\n      ></textarea>\n    </p>\n    <p>\n      Logic:\n      <select id=\"logic\" style=\"width: 90%\">\n        <option value=\"business\">Business</option>\n        <option value=\"technical\">Technical</option>\n      </select>\n    </p>\n    <button id=\"preview\">Preview Image</button>\n    <div id=\"previewContainer\" style=\"margin-top: 20px; display: none\">\n      <img\n        id=\"imageDisplay\"\n        style=\"max-width: 100%; display: block; margin-top: 10px\"\n      />\n      <p>\n        Description:\n        <textarea\n          id=\"description\"\n          placeholder=\"Describe the image\"\n          style=\"width: 90%; height: 100px\"\n        ></textarea>\n      </p>\n    </div>\n    <p>\n      Technical Notes:\n      <textarea\n        id=\"technicalNotes\"\n        placeholder=\"Add your Swagger Ui link here.\"\n        style=\"width: 90%; height: 100px\"\n      ></textarea>\n    </p>\n    <button id=\"finalPayload\">Generate User Story</button>\n\n    <div class=\"spinner\" id=\"spinner\"></div>\n    <div\n      id=\"finalPayloadPreview\"\n      style=\"margin-top: 20px; display: none; background-color: #f0f0f0; padding: 10px;\"\n    >\n      <h3>User Story</h3>\n      <p>\n        <strong>Description:</strong>\n      </p>\n      <p>\n        <span id=\"displayDescription\">Default Business Description</span>\n        <span class=\"edit-icon\" id=\"editTone\">&#9998;</span>\n      </p>\n      <p>\n        <strong>Acceptance Criteria:</strong>\n      </p>\n      <p>\n        <span id=\"displayAcceptanceCrit\">Default Acceptance Criteria</span>\n        <span class=\"edit-icon\" id=\"editFormat\">&#9998;</span>\n      </p>\n      <p>\n        <strong>Technical Notes:</strong>\n      </p>\n      <p>\n        <span id=\"displayTechNotes\">Default Technical Notes</span>\n        <span class=\"edit-icon\" id=\"editDescription\">&#9998;</span>\n      </p>\n      <p>\n        <strong>Points:</strong>\n      </p>\n      <p>\n        <span id=\"displayPoints\">5</span>\n        <span class=\"edit-icon\" id=\"editPoints\">&#9998;</span>\n      </p>\n      <img\n        id=\"finalImageDisplay\"\n        style=\"max-width: 100%; display: block; margin-top: 10px\"\n      />\n      <div id=\"apiResponse\" style=\"margin-top: 20px\"></div>\n      <button id=\"saveUserStory\">Save User Story</button>\n    </div>\n\n    <script>\n      const previewButton = document.getElementById(\"preview\");\n      const toneTextarea = document.getElementById(\"tone\");\n      const formatTextarea = document.getElementById(\"format\");\n      const logicSelect = document.getElementById(\"logic\");\n      const technicalNotesTextarea = document.getElementById(\"technicalNotes\");\n      const descriptionTextarea = document.getElementById(\"description\");\n      const finalPayloadButton = document.getElementById(\"finalPayload\");\n      const imageDisplay = document.getElementById(\"imageDisplay\");\n      const previewContainer = document.getElementById(\"previewContainer\");\n      const finalPayloadPreview = document.getElementById(\"finalPayloadPreview\");\n      const displayDescription = document.getElementById(\"displayDescription\");\n      const displayAcceptanceCrit = document.getElementById(\"displayAcceptanceCrit\");\n      const displayTechNotes = document.getElementById(\"displayTechNotes\");\n      const displayPoints = document.getElementById(\"displayPoints\");\n      const displayLogic = document.getElementById(\"displayLogic\");\n      const saveUserStoryButton = document.getElementById(\"saveUserStory\");\n      const apiResponseContainer = document.getElementById(\"apiResponse\");\n\n      previewButton.onclick = () => {\n        parent.postMessage({ pluginMessage: { type: \"export-png\" } }, \"*\");\n      };\n\n      finalPayloadButton.onclick = async () => {\n        // Show spinner while waiting for data\n        document.getElementById(\"spinner\").style.display = \"block\";\n\n        // Retrieve the values from the input fields\n        const tone = toneTextarea.value;\n        const format = formatTextarea.value;\n        const description = descriptionTextarea.value;\n\n        // Update the preview with the provided values\n        displayDescription.textContent = tone;\n        displayAcceptanceCrit.textContent = format;\n        displayTechNotes.textContent = description;\n        displayLogic.textContent = logicSelect.options[logicSelect.selectedIndex].text;\n        displayPoints.textContent = technicalNotesTextarea.value;\n        finalImageDisplay.src = imageDisplay.src;\n        finalPayloadPreview.style.display = \"block\";\n\n        // Hide spinner after data is displayed (simulate async operation)\n        setTimeout(() => {\n          document.getElementById(\"spinner\").style.display = \"none\";\n        }, 1000);\n\n        // Call the analyze_image function with provided parameters\n        const msg = {\n          pluginMessage: {\n            type: \"call-function\",\n            functionName: \"analyze_image\",\n            parameters: {\n              tone,\n              format,\n              description\n            }\n          }\n        };\n        parent.postMessage(msg, \"*\");\n      // Call the API and display the response\nconst apiUrl = \"http://localhost:5000/analyze_image?image=finance.png\";\ntry {\n  const response = await fetch(apiUrl, { method: \"GET\" });\n  const data = await response.json();\n  apiResponseContainer.innerHTML = `<p><strong>API Response:</strong></p><pre>${data.message}</pre>`;\n} catch (error) {\n  console.error(\"API call failed:\", error);\n  apiResponseContainer.textContent = \"Failed to call API\";\n};\n\n// Function to toggle between span and textarea\nfunction toggleEditField(element) {\n  const span = element.previousElementSibling;\n  const value = span.textContent;\n  const textarea = document.createElement(\"textarea\");\n  textarea.value = value;\n  span.parentNode.replaceChild(textarea, span);\n  textarea.focus();\n  const saveButton = document.createElement(\"button\");\n  saveButton.textContent = \"Save\";\n  saveButton.classList.add(\"save-button\");\n  saveButton.addEventListener(\"click\", () => {\n    const newValue = textarea.value;\n    span.textContent = newValue;\n    textarea.parentNode.replaceChild(span, textarea);\n    saveButton.parentNode.removeChild(saveButton);\n    element.style.display = \"inline-block\"; // Show the edit button after saving\n  });\n  element.parentNode.appendChild(saveButton); // Appending save button to the parent <p> element\n  element.style.display = \"none\"; // Hide the edit button while editing\n}\n// Add click event listeners to edit icons\ndocument.getElementById(\"editTone\").addEventListener(\"click\", () => {\n  toggleEditField(document.getElementById(\"editTone\"));\n});\ndocument.getElementById(\"editFormat\").addEventListener(\"click\", () => {\n  toggleEditField(document.getElementById(\"editFormat\"));\n});\ndocument.getElementById(\"editDescription\").addEventListener(\"click\", () => {\n  toggleEditField(document.getElementById(\"editDescription\"));\n});\ndocument.getElementById(\"editPoints\").addEventListener(\"click\", () => {\n  toggleEditField(document.getElementById(\"editPoints\"));\n});\n\nsaveUserStoryButton.onclick = () => {\n  // Gather data from the User Story section\n\n  const userStoryData = {\n    description: displayDescription.textContent,\n    acceptanceCriteria: displayAcceptanceCrit.textContent,\n    technicalNotes: displayTechNotes.textContent,\n    points: displayPoints.textContent, // Assuming you have an element with id=\"displayPoints\"\n  };\n\n  // Convert the data to HTML format\n  const html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>User Story</title>\n    <meta charset=\"UTF-8\">\n    <style>\n        body { font-family: Arial, sans-serif; }\n        h2, h3, p { margin: 0; padding: 0; }\n        img { max-width: 100%; height: auto; }\n    </style>\n</head>\n<body>\n    <h2>User Story</h2>\n    <h3>Description:</h3>\n    <p>${userStoryData.description}</p>\n    <h3>Acceptance Criteria:</h3>\n    <p>${userStoryData.acceptanceCriteria}</p>\n    <h3>Technical Notes:</h3>\n    <p>${userStoryData.technicalNotes}</p>\n    <h3>Points:</h3>\n    <p>${userStoryData.points}</p>\n    <img src=\"${finalImageDisplay.src}\" />\n</body>\n</html>\n  `;\n\n  // Convert HTML to Blob\n  const blob = new Blob([html], { type: \"application/msword\" });\n  const url = URL.createObjectURL(blob);\n\n  // Create a link element and simulate a click to download the Word document\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = \"user_story.doc\";\n  document.body.appendChild(link);\n  link.click();\n\n  // Clean up\n  URL.revokeObjectURL(url);\n  document.body.removeChild(link);\n\n  // Hide spinner after all operations are complete\n  setTimeout(() => {\n    document.getElementById(\"spinner\").style.display = \"none\";\n  }, 1000); // Adjust timeout as needed\n};\n\nonmessage = (event) => {\n  const msg = event.data.pluginMessage;\n  if (msg.type === \"exported-png\" && msg.bytes) {\n    const binaryString = msg.bytes.reduce(\n      (data, byte) => data + String.fromCharCode(byte),\n      \"\"\n    );\n    const base64 = btoa(binaryString);\n    imageDisplay.src = `data:image/png;base64,${base64}`;\n    previewContainer.style.display = \"block\";\n\n    // Save image to repository\n    saveImageToRepository(base64);\n  }\n};\n\nfunction saveImageToRepository(base64) {\n  // Get the current URL\n  const currentUrl = window.location.href;\n\n  // Extract the directory path from the URL\n  const directoryPath = currentUrl.substring(\n    0,\n    currentUrl.lastIndexOf(\"/\") + 1\n  );\n\n  // Construct the path to the images folder\n  const imagePath = `${directoryPath}images/preview_image.png`;\n\n  // Convert base64 data to blob\n  const byteCharacters = atob(base64);\n  const byteNumbers = new Array(byteCharacters.length);\n  for (let i = 0; i < byteCharacters.length; i++) {\n    byteNumbers[i] = byteCharacters.charCodeAt(i);\n  }\n  const byteArray = new Uint8Array(byteNumbers);\n  const blob = new Blob([byteArray], { type: \"image/png\" });\n\n  // Create a file object\n  const file = new File([blob], imagePath, { type: \"image/png\" });\n\n  // Trigger a download of the created file using a link\n  const linkImg = document.createElement(\"a\");\n  linkImg.href = URL.createObjectURL(file);\n  linkImg.download = imagePath;\n  document.body.appendChild(linkImg);\n  linkImg.click();\n  document.body.removeChild(linkImg);\n};\n    </script>\n  </body>\n</html>"
    }
  ],
  "mongodb": [
    {
      "id": 401,
      "projectId": 6,
      "description": "Book Document Sample",
      "code": "{\n  \"_id\": {\n    \"$oid\": \"66f1faf253266e4a50c73bfd\"\n  },\n  \"title\": \"The Light Fantastic\",\n  \"author\": \"Terry Pratchett\",\n  \"pages\": 360,\n  \"rating\": 7,\n  \"genres\": [\n    \"fantasy\",\n    \"magic\"\n  ],\n  \"reviews\": [\n    {\n      \"name\": \"luigi\",\n      \"body\": \"it was pretty good\"\n    },\n    {\n      \"name\": \"bowser\",\n      \"body\": \"loved it!!\"\n    }\n  ]\n}"
    },
    {
      "id": 402,
      "projectId": 6,
      "description": "MongoDB Connection Setup with MongoClient in Node.js",
      "code": "const { MongoClient } = require('mongodb');\n\nlet dbConnection;\nlet uri = 'your-mongodb-uri';\n\nmodule.exports = {\n  connectToDb: (cb) => {\n    MongoClient.connect(uri)\n      .then((client) => {\n        dbConnection = client.db();\n        return cb();\n      })\n      .catch((err) => {\n        console.log('Database Connection Error', err);\n        return cb(err);\n      });\n  },\n  getDb: () => dbConnection,\n};"
    },
    {
      "id": 403,
      "projectId": 6,
      "description": "Retrieve all books from MongoDB using Express",
      "code": "app.get('/books', (req, res) => {\n  let books = [];\n  const page = req.query.page || 0;\n  const booksPerPage = 3;\n\n  db.collection('books')\n    .find()\n    .sort({ author: 1 })\n    .skip(page * booksPerPage)\n    .limit(booksPerPage)\n    .forEach((book) => books.push(book))\n    .then(() => res.status(200).json(books))\n    .catch((err) => res.status(500).json({ error: 'Could not fetch the documents' }));\n});"
    },
    {
      "id": 404,
      "projectId": 6,
      "description": "Retrieve a specific book by ID from MongoDB",
      "code": "app.get('/books/:id', (req, res) => {\n  if (ObjectId.isValid(req.params.id)) {\n    db.collection('books')\n      .findOne({ _id: new ObjectId(req.params.id) })\n      .then((doc) => {\n        if (doc) {\n          res.status(200).json(doc);\n        } else {\n          res.status(404).json({ error: 'Document not found' });\n        }\n      })\n      .catch((err) => res.status(500).json({ error: 'Could not fetch the document' }));\n  } else {\n    res.status(500).json({ error: 'Not a valid doc id' });\n  }\n});"
    },
    {
      "id": 405,
      "projectId": 6,
      "description": "Create a new book document in MongoDB",
      "code": "app.post('/books', (req, res) => {\n  const book = req.body;\n  db.collection('books')\n    .insertOne(book)\n    .then((result) => res.status(201).json(result))\n    .catch((err) => res.status(500).json({ error: 'Could not create the document' }));\n});"
    },
    {
      "id": 406,
      "projectId": 6,
      "description": "Delete a book by ID from MongoDB",
      "code": "app.delete('/books/:id', (req, res) => {\n  if (ObjectId.isValid(req.params.id)) {\n    db.collection('books')\n      .deleteOne({ _id: new ObjectId(req.params.id) })\n      .then((result) => res.status(200).json(result))\n      .catch((err) => res.status(500).json({ error: 'Could not delete the document' }));\n  } else {\n    res.status(500).json({ error: 'Not a valid doc id' });\n  }\n});"
    },
    {
      "id": 407,
      "projectId": 6,
      "description": "Update a book by ID in MongoDB",
      "code": "app.patch('/books/:id', (req, res) => {\n  const updates = req.body;\n  if (ObjectId.isValid(req.params.id)) {\n    db.collection('books')\n      .updateOne({ _id: new ObjectId(req.params.id) }, { $set: updates })\n      .then((result) => res.status(200).json(result))\n      .catch((err) => res.status(500).json({ error: 'Could not update the document' }));\n  } else {\n    res.status(500).json({ error: 'Not a valid doc id' });\n  }\n});"
    }
  ]
}
