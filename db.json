{
  "projects": [
    {
      "id": 1,
      "name": "TypeBeat",
      "description": "A digital production marketplace that allows music producers to sell and license beats."
    },
    {
      "id": 2,
      "name": "Figma Extension",
      "description": null
    }
  ],
  "react": [
    {
      "id": 101,
      "projectId": 1,
      "description": "Example of a Single Card to be mapped in another component",
      "code": "import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardContent, Link } from \"@material-ui/core\";\n\nAlbumSingle.propTypes = {\n  currentUser: PropTypes.shape({\n    avatar: PropTypes.string,\n    email: PropTypes.string,\n    userName: PropTypes.string,\n  }),\n  location: PropTypes.shape({\n    state: PropTypes.string,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  }),\n  albums: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.number,\n    professionalName: PropTypes.string,\n    imageUrl: PropTypes.string,\n  }),\n  onClick: PropTypes.func,\n};\n\nexport default function AlbumSingle(props) {\n  const oneAlbum = props.albums;\n\n  const onError = (e) => {\n    e.target.onerror = null;\n    e.target.src =\n      \"https://demo.tutorialzine.com/2015/03/html5-music-player/assets/img/default.png\";\n  };\n\n  const onAlbumClick = () => {\n    props.onClick(oneAlbum);\n  };\n\n  return (\n    <Card\n      className=\"mb-4 mr-1\"\n      style={{\n        backgroundColor: \"transparent\",\n        boxShadow: \"none\",\n      }}\n    >\n      <img\n        alt=\"...\"\n        className=\"card-img-top\"\n        style={{ borderRadius: 10, aspectRatio: \"1/1\" }}\n        src={oneAlbum.imageUrl}\n        onError={onError}\n      />\n      <CardContent className=\"p-3\">\n        <Link\n          component=\"h5\"\n          className=\"card-title font-weight-bold font-size-lg\"\n          color=\"inherit\"\n          onClick={onAlbumClick}\n        >\n          {oneAlbum.name}\n        </Link>\n        <p className=\"card-text\">{oneAlbum.professionalName}</p>\n      </CardContent>\n    </Card>\n  );\n}"
    },
    {}
  ],
  "dotnet": [
    {
      "id": 201,
      "projectId": 1,
      "description": "REST APIs for Album Service",
      "code": "public class AlbumService : IAlbumService\n{\n    public IDataProvider _data = null;\n\n    public AlbumService(IDataProvider data)\n    {\n        _data = data;\n    }\n\n    public int Add(AlbumAddRequest model, int userId)\n    {\n        int id = 0;\n        string procName = \"[dbo].[Albums_Insert]\";\n        _data.ExecuteNonQuery(procName,\n            inputParamMapper: delegate (SqlParameterCollection col)\n            {\n                AddCommonParams(model, col, userId);\n                SqlParameter idOut = new SqlParameter(\"@Id\", SqlDbType.Int);\n                idOut.Direction = ParameterDirection.Output;\n                col.Add(idOut);\n\n            }, returnParameters: delegate (SqlParameterCollection returnCollection)\n            {\n                object oId = returnCollection[\"@Id\"].Value;\n                int.TryParse(oId.ToString(), out id);\n            });\n        return id;\n    }\n\n    public void Update(AlbumUpdateRequest model, int userId)\n    {\n        string procName = \"[dbo].[Albums_Update]\";\n        _data.ExecuteNonQuery(procName,\n            inputParamMapper: delegate (SqlParameterCollection col)\n            {\n                AddCommonParams(model, col, userId);\n                col.AddWithValue(\"@Id\", model.Id);\n            }, returnParameters: null);\n    }\n\n    public void Delete(int id)\n    {\n        string procName = \"[dbo].[Albums_Delete_ById]\";\n        _data.ExecuteNonQuery(procName,\n        inputParamMapper: delegate (SqlParameterCollection col)\n        {\n            col.AddWithValue(\"@Id\", id);\n        }, returnParameters: null);\n    }\n\n    public Album Get(int id)\n    {\n        string procName = \"[dbo].[Albums_Select_ById]\";\n        Album aAlbum = null;\n        _data.ExecuteCmd(procName,\n            inputParamMapper: delegate (SqlParameterCollection paramCollection)\n        {\n            paramCollection.AddWithValue(\"@Id\", id);\n\n        }, singleRecordMapper: delegate (IDataReader reader, short set)\n        {\n            aAlbum = MapAlbum(reader, out int startingIndex);\n\n        });\n        return aAlbum;\n    }\n}"
    },
    {
      "id": 202,
      "projectId": 1,
      "description": "SendGrid to Send Email Notifications to Users",
      "code": "public class EmailService : IEmailService\n{\n    private IWebHostEnvironment _env;\n    private AppKeys _appKeys;\n\n    public EmailService(IWebHostEnvironment env, IOptions<AppKeys> appKeys)\n    {\n        _env = env;\n        _appKeys = appKeys.Value;\n    }\n\n    public async void Add(EmailsAddRequest model)\n    {\n        var path = \"/EmailTemplate/Test.html\";\n        var filePath = _env.WebRootPath + path;\n        var htmlContent = System.IO.File.ReadAllText(filePath).Replace(\"{{&&message}}\", \"Welcome!\");\n        SendGridMessage message = new SendGridMessage()\n        {\n            From = new EmailAddress(\"devteam@gmail.com\", \"Dev Team\"),\n            Subject = model.Subject,\n            PlainTextContent = model.PlainTextContent,\n            HtmlContent = htmlContent\n        };\n        message.AddTo(model.To);\n        await Send(message);\n    }\n\n    private async Task Send(SendGridMessage message)\n    {\n        var client = new SendGridClient(_appKeys.SendGridAppKey);\n        await client.SendEmailAsync(message);\n    }\n}"
    }
  ],
  "html": [
    {
      "id": 301,
      "projectId": 2,
      "description": "Allows user to generate a User Story off of Figma diagrams",
      "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <style>\n      body {\n        font-family: \"Roboto\", sans-serif;\n        background-color: #f4f4f4;\n        color: #333;\n        padding: 20px;\n        margin: 0;\n        height: 2000px;\n      }\n      h3 {\n        color: #2a2a2a;\n        font-weight: 500;\n      }\n      input,\n      button,\n      textarea,\n      select {\n        font-family: \"Roboto\", sans-serif;\n        padding: 12px 15px;\n        margin-top: 8px;\n        width: 100%;\n        box-sizing: border-box;\n        border: 2px solid #ddd;\n        border-radius: 5px;\n        transition: all 0.3s ease;\n      }\n      input:focus,\n      textarea:focus,\n      select:focus {\n        border-color: #0056b3;\n        box-shadow: 0 0 8px rgba(0, 86, 179, 0.2);\n      }\n      button {\n        background-image: linear-gradient(45deg, #6ab04c, #26de81);\n        color: white;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n      }\n      button:hover {\n        background-image: linear-gradient(45deg, #26de81, #6ab04c);\n        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.15);\n      }\n      div {\n        margin-top: 10px;\n        padding: 15px;\n        background-color: white;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      }\n      #finalPayloadPreview {\n        background-color: #e8f8f5;\n        border-left: 5px solid #26de81;\n      }\n      p {\n        margin: 10px 0;\n        position: relative;\n      }\n      .edit-icon {\n        position: absolute;\n        right: 5px;\n        top: 50%;\n        transform: translateY(-80%) scaleX(-1);\n        cursor: pointer;\n      }\n      .save-button {\n        right: 5px;\n        top: 50%;\n        cursor: pointer;\n        transform: translateY(-50%);\n        width: 25%;\n        margin-top: 25px;\n        display: block;\n      }\n      span {\n        display: inline-block;\n        max-width: 90%;\n        word-wrap: break-word;\n      }\n      .spinner {\n        position: absolute;\n        top: 1250px;\n        left: 40%;\n        transform: translateX(-50%, -50%);\n        z-index: 9999;\n        border: 4px solid rgba(0, 0, 0, 0.1);\n        border-top: 4px solid #3498db;\n        border-radius: 50%;\n        width: 30px;\n        height: 30px;\n        animation: spin 1s linear infinite;\n        display: none;\n      }\n      @keyframes spin {\n        0% {\n          transform: rotate(0deg);\n        }\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n    </style>\n  </head>\n  <body>\n    <h3>Create a User Story</h3>\n    <p>\n      Tone:\n      <textarea\n        id=\"tone\"\n        placeholder=\"Ex. for a health insurance company\"\n        style=\"width: 90%; height: 100px\"\n      ></textarea>\n    </p>\n    <p>\n      Format:\n      <textarea\n        id=\"format\"\n        placeholder=\"Ex. As a Blank, I want to be able to Blank so that I can blank.\"\n        style=\"width: 90%; height: 100px\"\n      ></textarea>\n    </p>\n    <p>\n      Logic:\n      <select id=\"logic\" style=\"width: 90%\">\n        <option value=\"business\">Business</option>\n        <option value=\"technical\">Technical</option>\n      </select>\n    </p>\n    <button id=\"preview\">Preview Image</button>\n    <div id=\"previewContainer\" style=\"margin-top: 20px; display: none\">\n      <img\n        id=\"imageDisplay\"\n        style=\"max-width: 100%; display: block; margin-top: 10px\"\n      />\n      <p>\n        Description:\n        <textarea\n          id=\"description\"\n          placeholder=\"Describe the image\"\n          style=\"width: 90%; height: 100px\"\n        ></textarea>\n      </p>\n    </div>\n    <p>\n      Technical Notes:\n      <textarea\n        id=\"technicalNotes\"\n        placeholder=\"Add your Swagger Ui link here.\"\n        style=\"width: 90%; height: 100px\"\n      ></textarea>\n    </p>\n    <button id=\"finalPayload\">Generate User Story</button>\n\n    <div class=\"spinner\" id=\"spinner\"></div>\n    <div\n      id=\"finalPayloadPreview\"\n      style=\"margin-top: 20px; display: none; background-color: #f0f0f0; padding: 10px;\"\n    >\n      <h3>User Story</h3>\n      <p>\n        <strong>Description:</strong>\n      </p>\n      <p>\n        <span id=\"displayDescription\">Default Business Description</span>\n        <span class=\"edit-icon\" id=\"editTone\">&#9998;</span>\n      </p>\n      <p>\n        <strong>Acceptance Criteria:</strong>\n      </p>\n      <p>\n        <span id=\"displayAcceptanceCrit\">Default Acceptance Criteria</span>\n        <span class=\"edit-icon\" id=\"editFormat\">&#9998;</span>\n      </p>\n      <p>\n        <strong>Technical Notes:</strong>\n      </p>\n      <p>\n        <span id=\"displayTechNotes\">Default Technical Notes</span>\n        <span class=\"edit-icon\" id=\"editDescription\">&#9998;</span>\n      </p>\n      <p>\n        <strong>Points:</strong>\n      </p>\n      <p>\n        <span id=\"displayPoints\">5</span>\n        <span class=\"edit-icon\" id=\"editPoints\">&#9998;</span>\n      </p>\n      <img\n        id=\"finalImageDisplay\"\n        style=\"max-width: 100%; display: block; margin-top: 10px\"\n      />\n      <div id=\"apiResponse\" style=\"margin-top: 20px\"></div>\n      <button id=\"saveUserStory\">Save User Story</button>\n    </div>\n\n    <script>\n      const previewButton = document.getElementById(\"preview\");\n      const toneTextarea = document.getElementById(\"tone\");\n      const formatTextarea = document.getElementById(\"format\");\n      const logicSelect = document.getElementById(\"logic\");\n      const technicalNotesTextarea = document.getElementById(\"technicalNotes\");\n      const descriptionTextarea = document.getElementById(\"description\");\n      const finalPayloadButton = document.getElementById(\"finalPayload\");\n      const imageDisplay = document.getElementById(\"imageDisplay\");\n      const previewContainer = document.getElementById(\"previewContainer\");\n      const finalPayloadPreview = document.getElementById(\"finalPayloadPreview\");\n      const displayDescription = document.getElementById(\"displayDescription\");\n      const displayAcceptanceCrit = document.getElementById(\"displayAcceptanceCrit\");\n      const displayTechNotes = document.getElementById(\"displayTechNotes\");\n      const displayPoints = document.getElementById(\"displayPoints\");\n      const displayLogic = document.getElementById(\"displayLogic\");\n      const saveUserStoryButton = document.getElementById(\"saveUserStory\");\n      const apiResponseContainer = document.getElementById(\"apiResponse\");\n\n      previewButton.onclick = () => {\n        parent.postMessage({ pluginMessage: { type: \"export-png\" } }, \"*\");\n      };\n\n      finalPayloadButton.onclick = async () => {\n        // Show spinner while waiting for data\n        document.getElementById(\"spinner\").style.display = \"block\";\n\n        // Retrieve the values from the input fields\n        const tone = toneTextarea.value;\n        const format = formatTextarea.value;\n        const description = descriptionTextarea.value;\n\n        // Update the preview with the provided values\n        displayDescription.textContent = tone;\n        displayAcceptanceCrit.textContent = format;\n        displayTechNotes.textContent = description;\n        displayLogic.textContent = logicSelect.options[logicSelect.selectedIndex].text;\n        displayPoints.textContent = technicalNotesTextarea.value;\n        finalImageDisplay.src = imageDisplay.src;\n        finalPayloadPreview.style.display = \"block\";\n\n        // Hide spinner after data is displayed (simulate async operation)\n        setTimeout(() => {\n          document.getElementById(\"spinner\").style.display = \"none\";\n        }, 1000);\n\n        // Call the analyze_image function with provided parameters\n        const msg = {\n          pluginMessage: {\n            type: \"call-function\",\n            functionName: \"analyze_image\",\n            parameters: {\n              tone,\n              format,\n              description\n            }\n          }\n        };\n        parent.postMessage(msg, \"*\");\n      // Call the API and display the response\nconst apiUrl = \"http://localhost:5000/analyze_image?image=finance.png\";\ntry {\n  const response = await fetch(apiUrl, { method: \"GET\" });\n  const data = await response.json();\n  apiResponseContainer.innerHTML = `<p><strong>API Response:</strong></p><pre>${data.message}</pre>`;\n} catch (error) {\n  console.error(\"API call failed:\", error);\n  apiResponseContainer.textContent = \"Failed to call API\";\n};\n\n// Function to toggle between span and textarea\nfunction toggleEditField(element) {\n  const span = element.previousElementSibling;\n  const value = span.textContent;\n  const textarea = document.createElement(\"textarea\");\n  textarea.value = value;\n  span.parentNode.replaceChild(textarea, span);\n  textarea.focus();\n  const saveButton = document.createElement(\"button\");\n  saveButton.textContent = \"Save\";\n  saveButton.classList.add(\"save-button\");\n  saveButton.addEventListener(\"click\", () => {\n    const newValue = textarea.value;\n    span.textContent = newValue;\n    textarea.parentNode.replaceChild(span, textarea);\n    saveButton.parentNode.removeChild(saveButton);\n    element.style.display = \"inline-block\"; // Show the edit button after saving\n  });\n  element.parentNode.appendChild(saveButton); // Appending save button to the parent <p> element\n  element.style.display = \"none\"; // Hide the edit button while editing\n}\n// Add click event listeners to edit icons\ndocument.getElementById(\"editTone\").addEventListener(\"click\", () => {\n  toggleEditField(document.getElementById(\"editTone\"));\n});\ndocument.getElementById(\"editFormat\").addEventListener(\"click\", () => {\n  toggleEditField(document.getElementById(\"editFormat\"));\n});\ndocument.getElementById(\"editDescription\").addEventListener(\"click\", () => {\n  toggleEditField(document.getElementById(\"editDescription\"));\n});\ndocument.getElementById(\"editPoints\").addEventListener(\"click\", () => {\n  toggleEditField(document.getElementById(\"editPoints\"));\n});\n\nsaveUserStoryButton.onclick = () => {\n  // Gather data from the User Story section\n\n  const userStoryData = {\n    description: displayDescription.textContent,\n    acceptanceCriteria: displayAcceptanceCrit.textContent,\n    technicalNotes: displayTechNotes.textContent,\n    points: displayPoints.textContent, // Assuming you have an element with id=\"displayPoints\"\n  };\n\n  // Convert the data to HTML format\n  const html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>User Story</title>\n    <meta charset=\"UTF-8\">\n    <style>\n        body { font-family: Arial, sans-serif; }\n        h2, h3, p { margin: 0; padding: 0; }\n        img { max-width: 100%; height: auto; }\n    </style>\n</head>\n<body>\n    <h2>User Story</h2>\n    <h3>Description:</h3>\n    <p>${userStoryData.description}</p>\n    <h3>Acceptance Criteria:</h3>\n    <p>${userStoryData.acceptanceCriteria}</p>\n    <h3>Technical Notes:</h3>\n    <p>${userStoryData.technicalNotes}</p>\n    <h3>Points:</h3>\n    <p>${userStoryData.points}</p>\n    <img src=\"${finalImageDisplay.src}\" />\n</body>\n</html>\n  `;\n\n  // Convert HTML to Blob\n  const blob = new Blob([html], { type: \"application/msword\" });\n  const url = URL.createObjectURL(blob);\n\n  // Create a link element and simulate a click to download the Word document\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = \"user_story.doc\";\n  document.body.appendChild(link);\n  link.click();\n\n  // Clean up\n  URL.revokeObjectURL(url);\n  document.body.removeChild(link);\n\n  // Hide spinner after all operations are complete\n  setTimeout(() => {\n    document.getElementById(\"spinner\").style.display = \"none\";\n  }, 1000); // Adjust timeout as needed\n};\n\nonmessage = (event) => {\n  const msg = event.data.pluginMessage;\n  if (msg.type === \"exported-png\" && msg.bytes) {\n    const binaryString = msg.bytes.reduce(\n      (data, byte) => data + String.fromCharCode(byte),\n      \"\"\n    );\n    const base64 = btoa(binaryString);\n    imageDisplay.src = `data:image/png;base64,${base64}`;\n    previewContainer.style.display = \"block\";\n\n    // Save image to repository\n    saveImageToRepository(base64);\n  }\n};\n\nfunction saveImageToRepository(base64) {\n  // Get the current URL\n  const currentUrl = window.location.href;\n\n  // Extract the directory path from the URL\n  const directoryPath = currentUrl.substring(\n    0,\n    currentUrl.lastIndexOf(\"/\") + 1\n  );\n\n  // Construct the path to the images folder\n  const imagePath = `${directoryPath}images/preview_image.png`;\n\n  // Convert base64 data to blob\n  const byteCharacters = atob(base64);\n  const byteNumbers = new Array(byteCharacters.length);\n  for (let i = 0; i < byteCharacters.length; i++) {\n    byteNumbers[i] = byteCharacters.charCodeAt(i);\n  }\n  const byteArray = new Uint8Array(byteNumbers);\n  const blob = new Blob([byteArray], { type: \"image/png\" });\n\n  // Create a file object\n  const file = new File([blob], imagePath, { type: \"image/png\" });\n\n  // Trigger a download of the created file using a link\n  const linkImg = document.createElement(\"a\");\n  linkImg.href = URL.createObjectURL(file);\n  linkImg.download = imagePath;\n  document.body.appendChild(linkImg);\n  linkImg.click();\n  document.body.removeChild(linkImg);\n};\n    </script>\n  </body>\n</html>"
    }
  ]
}
