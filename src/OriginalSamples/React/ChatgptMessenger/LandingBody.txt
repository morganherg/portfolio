import {useContext, useEffect, useState} from "react";
import { useAuth0 } from "@auth0/auth0-react";
import TopNav from "../components/TopNav";
import BottomNav from "../components/BottomNav";
import MessageInput from "../components/MessageInput";
import ChatGrid from "../components/ChatGrid";
import isEqual from "lodash.isequal";
import ChatCompletionContext, {GptMessage} from "../contexts/ChatCompletionContext";
import ChatCompletionContextProvider from "../components/ChatCompletionContextProvider";

interface Message {
  id: number;
  sender: string;
  text: string;
}

const LandingBody = () => {
  const auth0 = useAuth0();
  const userEmail = auth0?.user?.email;

  const chatCompletionProvider = useContext(ChatCompletionContext);

  const [messages, setMessages] = useState<Message[]>([]);
  const [addedMessages, setAddedMessages] = useState([] as Array<GptMessage>);

  useEffect(() => {
    const newGptMessages = chatCompletionProvider.completionContext.messagesSuccessfullyAddedToConversation;

    if (isEqual(addedMessages, newGptMessages)) {
      return;
    }
    setAddedMessages(newGptMessages);

    // map GptMessage to Message
    const newMessages = newGptMessages
      .filter(gptMsg => {
        return gptMsg.role === "user" || gptMsg.role === "assistant";
      })
      .map(gptMsg => {
        return {
          id: gptMsg.role === "user" ? 2 : 1,
          sender: gptMsg.role === "user" ? "User" : "Grace",
          text: gptMsg.content
        };
      });

    setMessages([...messages, ...newMessages]);
  }, [messages, chatCompletionProvider]);

  const addMessage = (message: string) => {
    const trimmedMessage = message?.trim();
    if (!trimmedMessage) {
      return;
    }

    chatCompletionProvider.sendNextMessage({
      role: "user",
      content: `USER: ${trimmedMessage}`
    });
  };

  return (
    <>
      <TopNav />
      <ChatGrid messages={messages} />
      <MessageInput onAddMessage={addMessage} />
      <BottomNav />
    </>
  );
};

export default LandingBody;